# Nombre del Workflow
name: Deploy to GitHub Pages

# Se ejecuta cada vez que haces un push a la rama 'main'
on: 
  push:
    branches:
      - main # Cambia a 'master' si esa es tu rama principal

# Permisos necesarios para que el workflow pueda escribir en la rama gh-pages
permissions:
  contents: write

# Define el trabajo a realizar
jobs:
  build-and-deploy:
    # El tipo de máquina virtual en la que se ejecutará el trabajo (runner)
    runs-on: ubuntu-latest

    steps:
      # 1. Clona tu repositorio en la máquina virtual
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      # 2. Crea el archivo firebase-config.js usando los secrets
      - name: Create Firebase Config File 🤫
        run: |
          echo "export const firebaseConfig = {" > firebase-config.js
          echo "  apiKey: '${{ secrets.FIREBASE_API_KEY }}'," >> firebase-config.js
          echo "  authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}'," >> firebase-config.js
          echo "  projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'," >> firebase-config.js
          echo "  storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}'," >> firebase-config.js
          echo "  messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}'," >> firebase-config.js
          echo "  appId: '${{ secrets.FIREBASE_APP_ID }}'" >> firebase-config.js
          echo "};" >> firebase-config.js

      # 2b. Crea el archivo meta-pixel-config.js desde el template
      - name: Create Meta Pixel Config File 📊
        run: |
          sed "s/PLACEHOLDER_PIXEL_ID/${{ secrets.META_PIXEL_ID }}/g" meta-pixel-config.template.js > meta-pixel-config.js

      # 3. Despliega los archivos a la rama gh-pages
      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages # La rama donde se desplegará
          folder: . # La carpeta a desplegar (la raíz del proyecto)